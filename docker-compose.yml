services:
  # VPN Gateway
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - "<LAN_INTERFACE_2_IP>:8888:8888/tcp"  # HTTP proxy bound to enp3s0
      - "<LAN_INTERFACE_2_IP>:9091:9091"      # Transmission on enp3s0
      - "8080:8080"                    # SABnzbd on all interfaces
      - "8112:8112"                    # Deluge web UI on all interfaces
      - "<LAN_INTERFACE_2_IP>:58846:58846"    # Deluge daemon on enp3s0
    volumes:
      - ./gluetun:/gluetun
      - /home/<YOUR_USERNAME>/ssd-cache/downloads:/downloads
    environment:
      - VPN_SERVICE_PROVIDER=protonvpn
      - VPN_TYPE=openvpn
      - OPENVPN_USER=${PROTON_USERNAME}
      - OPENVPN_PASSWORD=${PROTON_PASSWORD}
      - SERVER_COUNTRIES=Canada
      # Remove invalid categories - ProtonVPN doesn't use categories in Gluetun
      # - SERVER_CATEGORIES=P2P  # REMOVE THIS LINE
      - FREE_ONLY=off  # Access Plus servers
      - VPN_PORT_FORWARDING=on  # Enable port forwarding
      - VPN_PORT_FORWARDING_PROVIDER=protonvpn
      - OPENVPN_PROTOCOL=udp
      - OPENVPN_CIPHERS=AES-256-GCM  # Fixed: use CIPHERS not CIPHER
      - FIREWALL_OUTBOUND_SUBNETS=<YOUR_LOCAL_SUBNET>,<DOCKER_NETWORK_1_SUBNET>
      - FIREWALL_VPN_INPUT_PORTS=9091,8080,8112,58846
      - FIREWALL_INPUT_PORTS=8888
      - HTTPPROXY=on
      - HTTPPROXY_LOG=on
      - BLOCK_MALICIOUS=on
      - BLOCK_ADS=off
      - DOT=on
      - DOT_PROVIDERS=cloudflare
      - TZ=${TIMEZONE}
      - PUID=1001
      - PGID=1002
      - LOG_LEVEL=info  # Change back to info
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "1.1.1.1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      vpn_network:
        ipv4_address: <DOCKER_VPN_NETWORK_GATEWAY>0
    restart: unless-stopped
    

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - management_network
    restart: unless-stopped
    depends_on:
      - traefik

  # Landing page
  landing:
    image: nginx:alpine
    container_name: landing
    volumes:
      - ./www:/usr/share/nginx/html:ro
    networks:
      - management_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.landing.rule=Host(`<YOUR_DOMAIN>`) && Path(`/`)"
      - "traefik.http.routers.landing.entrypoints=web"
      - "traefik.http.services.landing.loadbalancer.server.port=80"

  # Traefik
  traefik:
    image: traefik:v3.0
    container_name: traefik
    ports:
      - "<LAN_INTERFACE_1_IP>:80:80"      # HTTP on enp2s0
      - "<LAN_INTERFACE_1_IP>:8090:8080"  # Dashboard on enp2s0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
      - "--accesslog=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/logs:/logs
    networks:
      - management_network
      - arr_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # Download Clients (VPN-routed)
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    network_mode: "service:gluetun"
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./sabnzbd:/config
      - /data:/data
    depends_on:
      gluetun:
        condition: service_healthy
    restart: unless-stopped

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    network_mode: "service:gluetun"
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./deluge:/config
      - /data:/data
    depends_on:
      gluetun:
        condition: service_healthy
    restart: unless-stopped

  # Media Server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    ports:
      - "<LAN_INTERFACE_1_IP>:32400:32400"  # Bind to enp2s0 IP
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - PUID=1001
      - PGID=1002
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      - TZ=${TIMEZONE}
      - PLEX_PREFERENCE_1=ManualPortMappingMode=1
      - PLEX_PREFERENCE_2=ManualPortMappingPort=32400
    volumes:
      - ./plex:/config
      - /data/media:/data/media
      - /home/<YOUR_USERNAME>/ssd-cache/transcode:/transcode
    networks:
      - management_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/plex`)"
      - "traefik.http.routers.plex.entrypoints=web"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"

  # *arr Suite
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./prowlarr:/config
      - /data:/data
    networks:
      - management_network
      - arr_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/prowlarr`)"
      - "traefik.http.routers.prowlarr.entrypoints=web"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./sonarr:/config
      - /data:/data
    networks:
      - management_network
      - arr_network
      - vpn_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/sonarr`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./radarr:/config
      - /data:/data
    networks:
      - management_network
      - arr_network
      - vpn_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/radarr`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./bazarr:/config
      - /data/media:/data/media
    networks:
      - management_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/bazarr`)"
      - "traefik.http.routers.bazarr.entrypoints=web"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./lidarr:/config
      - /data:/data
    networks:
      - management_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/lidarr`)"
      - "traefik.http.routers.lidarr.entrypoints=web"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"

  readarr:
    image: ghcr.io/hotio/readarr:latest
    container_name: readarr
    environment:
      - PUID=1001
      - PGID=1002
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ./readarr:/config
      - /data:/data
    networks:
      - management_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.rule=Host(`<YOUR_DOMAIN>`) && PathPrefix(`/readarr`)"
      - "traefik.http.routers.readarr.entrypoints=web"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"


  # DNS and Ad-blocking
  adguardhome:
    image: adguard/adguardhome:latest
    container_name: adguardhome
    ports:
      - "<LAN_INTERFACE_1_IP>:53:53/tcp"
      - "<LAN_INTERFACE_1_IP>:53:53/udp"
      - "<LAN_INTERFACE_1_IP>:3001:3000/tcp"
    volumes:
      - ./adguard/work:/opt/adguardhome/work
      - ./adguard/conf:/opt/adguardhome/conf
    networks:
      - management_network
    restart: unless-stopped

  # Photo Management
  immich-server:
    container_name: immich-server
    image: ghcr.io/immich-app/immich-server:release
    command: ['start.sh', 'immich']
    ports:
      - "<LAN_INTERFACE_1_IP>:2283:3001"
    volumes:
      - /data/immich/library:/usr/src/app/upload
    environment:
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_USERNAME=postgres
      - DB_DATABASE_NAME=immich
      - DB_HOSTNAME=immich-postgres
      - REDIS_HOSTNAME=immich-redis
    depends_on:
      - immich-redis
      - immich-postgres
    networks:
      - management_network
    restart: unless-stopped

  immich-postgres:
    container_name: immich-postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    environment:
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=immich
    volumes:
      - /data/immich/postgres:/var/lib/postgresql/data
    networks:
      - management_network
    restart: unless-stopped

  immich-redis:
    container_name: immich-redis
    image: redis:6.2-alpine
    networks:
      - management_network
    restart: unless-stopped

networks:
  vpn_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-vpn
    ipam:
      config:
        - subnet: <DOCKER_VPN_NETWORK_SUBNET>
          gateway: <DOCKER_VPN_NETWORK_GATEWAY>
    internal: false

  management_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-mgmt
    ipam:
      config:
        - subnet: <DOCKER_NETWORK_1_SUBNET>
          gateway: <DOCKER_NETWORK_1_GATEWAY>

  arr_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-arr
    ipam:
      config:
        - subnet: <DOCKER_NETWORK_2_SUBNET>
          gateway: <DOCKER_NETWORK_2_GATEWAY>
    internal: true
